set -o pipefail

RED="\033[31m"
NORMAL="\033[0;39m"

export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
# reread profile.d
for f in $(ls -1 /etc/profile.d/*.sh) ; do
  test -r $f && source $f
done

export LC_ALL=en_US.UTF8
export DEBIAN_FRONTEND=noninteractive
export TERM=xterm

cd ~/

rm -rf ~/citool
git clone -q --depth=1 --branch=master https://github.com/vexor/vx-citool.git ~/citool || (
  rs=$?

  echo -e "${RED}The command 'git clone -q --depth=1 --branch=master https://github.com/vexor/vx-citool.git ~/citool' failed with code $rs${NORMAL}"

  exit $rs
)



echo  \
  | base64 --decode | ~/citool/bin/vx-citool -

exit $?
